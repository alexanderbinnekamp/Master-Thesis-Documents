{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5d6ddb67",
   "metadata": {},
   "source": [
    "Author: Alexander Binnekamp"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da864af9",
   "metadata": {},
   "source": [
    "1. Imports relevant libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ffa34252",
   "metadata": {},
   "outputs": [],
   "source": [
    "import glob\n",
    "from deep_translator import GoogleTranslator\n",
    "from os.path import basename"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4fb47e0b",
   "metadata": {},
   "source": [
    "2. Loops through folder and stores filepaths in a list variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a8dea730",
   "metadata": {},
   "outputs": [],
   "source": [
    "filepaths = []\n",
    "\n",
    "for name in glob.glob('C:/Users/alexa/OneDrive/Documenten/Thesis Lab/FRA_National/National/*.txt'):\n",
    "    filepaths.append(name)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0232115",
   "metadata": {},
   "source": [
    "3. Loops through list of filepaths, opens each file and stores the text in a new list variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "94c3da43",
   "metadata": {},
   "outputs": [],
   "source": [
    "filetexts = []\n",
    "\n",
    "for f in filepaths:\n",
    "    with open(f, encoding='utf-8', errors='ignore') as f:\n",
    "        filetexts.append(f.read())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f992773",
   "metadata": {},
   "source": [
    "4. Defines a function that removes the pathway and saves only the filename"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "344fc2f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def remove_dir(filepath):\n",
    "    return basename(filepath)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d6f902e",
   "metadata": {},
   "source": [
    "5. Defines a function that automatically translates a corpus of text documents to a different language. First, it divides each text in chunks of max 4999 characters in order for the GoogleTranslater to be able to handle it. The chunks are stored in a new variable called 'chunks'. Secondly, it applies the remove_dir function to the filename. Thirdly, it loops through each chunk and translates each chunk from given source language to given target language. The translates chunks are stored in a new text file that retains the original filename. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "98e529e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def translating(filetext, filepath):\n",
    "    n = 4999\n",
    "    chunks = [filetext[i:i+n] for i in range(0, len(filetext), n)]\n",
    "    filename = remove_dir(filepath)\n",
    "    for chunk in chunks:\n",
    "        text_file = open(\"C:/Users/alexa/OneDrive/Documenten/Thesis Lab/FRA_translated/\" + filename, \"a\", errors='ignore')\n",
    "        n = text_file.write(GoogleTranslator(source='french', target='english').translate(chunk))\n",
    "        text_file.close()\n",
    "    return "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a1befb2",
   "metadata": {},
   "source": [
    "6. To run the function you can run the code below. Note: depending on the size of the corpus it may take a while for all text documents to be translated, however, it should occur without errors. The range can be altered to test whether the code works. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9f04e8d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "for f in range(len(filepaths)):\n",
    "    translating(filetexts[f], filepaths[f])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
